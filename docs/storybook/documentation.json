{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "renderArgsWithModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/helpers/stories.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends object>(args: T, modelArgs: string[]) => {\n    return Object.keys(args).map(key => {\n        if (modelArgs.includes(key)) {\n            return `[(${key})]=\"${key}\"`;\n        }\n        const value = args[key as keyof T];\n        if (['string'].includes(typeof value)) {\n            return `${key}=\"${value}\"`;\n        }\n        if (typeof value === 'boolean' && value === true) {\n            return key;\n        }\n        if (['number', 'boolean'].includes(typeof value)) {\n            return `[${key}]=\"${value}\"`;\n        }\n        return `[${key}]=\"${key}\"`;\n    }).join(' ');\n}"
            },
            {
                "name": "renderTwoWayBinding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/helpers/stories.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(selector: string, modelArgs: string[]): StoryObj<any>['render'] => (args: object) => ({\n    props: args,\n    template: `<${selector} ${renderArgsWithModel(args, modelArgs)}></${selector}>`,\n})"
            },
            {
                "name": "storyHtml",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/helpers/stories.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends ReturnType<typeof cva>>(args: StoryHtmlType<T>, cva?: T,) => {\n    return {\n        parameters: {\n            controls: {\n                exclude: /.*/g,\n                ...args.parameters?.['controls']\n            },\n            ...args.parameters\n        },\n        ...args,\n    } satisfies StoryObj<VariantProps<T>>;\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "StoryHtmlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<VariantProps<T>>",
                "file": "src/helpers/stories.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/helpers/stories.helpers.ts": [
                {
                    "name": "renderArgsWithModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/helpers/stories.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends object>(args: T, modelArgs: string[]) => {\n    return Object.keys(args).map(key => {\n        if (modelArgs.includes(key)) {\n            return `[(${key})]=\"${key}\"`;\n        }\n        const value = args[key as keyof T];\n        if (['string'].includes(typeof value)) {\n            return `${key}=\"${value}\"`;\n        }\n        if (typeof value === 'boolean' && value === true) {\n            return key;\n        }\n        if (['number', 'boolean'].includes(typeof value)) {\n            return `[${key}]=\"${value}\"`;\n        }\n        return `[${key}]=\"${key}\"`;\n    }).join(' ');\n}"
                },
                {
                    "name": "renderTwoWayBinding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/helpers/stories.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(selector: string, modelArgs: string[]): StoryObj<any>['render'] => (args: object) => ({\n    props: args,\n    template: `<${selector} ${renderArgsWithModel(args, modelArgs)}></${selector}>`,\n})"
                },
                {
                    "name": "storyHtml",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/helpers/stories.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends ReturnType<typeof cva>>(args: StoryHtmlType<T>, cva?: T,) => {\n    return {\n        parameters: {\n            controls: {\n                exclude: /.*/g,\n                ...args.parameters?.['controls']\n            },\n            ...args.parameters\n        },\n        ...args,\n    } satisfies StoryObj<VariantProps<T>>;\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/helpers/stories.helpers.ts": [
                {
                    "name": "StoryHtmlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<VariantProps<T>>",
                    "file": "src/helpers/stories.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/helpers/stories.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "renderArgsWithModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/helpers/stories.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "renderTwoWayBinding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/helpers/stories.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyHtml",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/helpers/stories.helpers.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StoryHtmlType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}